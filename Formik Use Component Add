// InputField.js :

jsx
import React from 'react';
import { useField } from 'formik';

const InputField = ({
  label,
  name,
  type = 'text',
  placeholder,
  validate,
}) => {
  const [field, meta] = useField(name);

  return (
    <div className="form-group">
      <label htmlFor={name}>{label}</label>
      <input
        type={type}
        name={name}
        id={name}
        placeholder={placeholder}
        {...field}
        className={`form-control ${
          meta.touched && meta.error ? 'is-invalid' : ''
        }`}
      />
      {meta.touched && meta.error ? (
        <div className="invalid-feedback">{meta.error}</div>
      ) : null}
    </div>
  );
};

export default InputField;


// ValidationSchema.js :

jsx
import * as Yup from 'yup';

const validationSchema = Yup.object().shape({
  firstName: Yup.string()
    .required('First name is required')
    .min(2, 'First name must be at least 2 characters')
    .max(50, 'First name must be at most 50 characters'),
  lastName: Yup.string()
    .required('Last name is required')
    .min(2, 'Last name must be at least 2 characters')
    .max(50, 'Last name must be at most 50 characters'),
  email: Yup.string()
    .required('Email is required')
    .email('Invalid email address')
    .max(100, 'Email must be at most 100 characters'),
  password: Yup.string()
    .required('Password is required')
    .min(8, 'Password must be at least 8 characters')
    .max(100, 'Password must be at most 100 characters'),
  confirmPassword: Yup.string()
    .required('Confirm password is required')
    .oneOf([Yup.ref('password')], 'Passwords do not match'),
});

export default validationSchema;

//FormComponent.js :

jsx
import React from 'react';
import { Formik, Form } from 'formik';
import InputField from './InputField';
import validationSchema from './ValidationSchema';

const FormComponent = () => {
  const handleSubmit = (values, { setSubmitting }) => {
    console.log(values);
    setSubmitting(false);
  };

  return (
    <Formik
      initialValues={{
        firstName: '',
        lastName: '',
        email: '',
        password: '',
        confirmPassword: '',
      }}
      validationSchema={validationSchema}
      onSubmit={handleSubmit}
    >
      {({ isSubmitting }) => (
        <Form>
          <InputField
            label="First Name"
            name="firstName"
            type="text"
            placeholder="Enter first name"
          />
          <InputField
            label="Last Name"
            name="lastName"
            type="text"
            placeholder="Enter last name"
          />
          <InputField
            label="Email"
            name="email"
            type="email"
            placeholder="Enter email"
          />
          <InputField
            label="Password"
            name="password"
            type="password"
            placeholder="Enter password"
          />
          <InputField
            label="Confirm Password"
            name="confirmPassword"
            type="password"
            placeholder="Confirm password"
          />
          <button type="submit" disabled={isSubmitting}>
            Submit
          </button>
        </Form>
      )}
    </Formik>
  );
};

export default FormComponent;
